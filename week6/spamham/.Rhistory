install.packages('RSpamData')
knitr::opts_chunk$set(echo = TRUE)
spamPath = system.file("data")
spamPath = system.file(package="RSpamData")
list.dir(spamPath, full.names = FALSE)
list.dirs(spamPath, full.names = FALSE)
```{r setup, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
suppressPackageStartupMessages(require(tm))
#install.packages("RColorBrewer")
library(RColorBrewer)
#library(RSpamData)
library(rpart)
library(NLP)
library(tm)
library(rpart.plot)
install.packages("rpart.plot")
options(warn=-1)
suppressPackageStartupMessages(require(tm))
#install.packages("RColorBrewer")
library(RColorBrewer)
#library(RSpamData)
library(rpart)
library(NLP)
library(tm)
library(rpart.plot)
suppressPackageStartupMessages(require(caret))
suppressPackageStartupMessages(require(MLmetrics))
library(naivebayes)
install.packages("naivebayes")
install.packages("e1071", "xgboost", "ggplot2", "kernlab")
install.packages("xgboost")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("kernlab")
knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
suppressPackageStartupMessages(require(tm))
#install.packages("RColorBrewer")
library(RColorBrewer)
#library(RSpamData)
library(rpart)
library(NLP)
library(tm)
library(rpart.plot)
suppressPackageStartupMessages(require(caret))
suppressPackageStartupMessages(require(MLmetrics))
library(naivebayes)
library(e1071)
suppressPackageStartupMessages(require(randomForest))
library(xgboost)
library(ggplot2)
suppressPackageStartupMessages(require(kernlab))
spamPath = system.file(package="RSpamData")
list.dirs(spamPath, full.names = FALSE)
install.packages("RSpamData")
data()
spamPath = "Data"
list.dirs(spamPath, full.names = FALSE)
head(list.files(path=(spamPath, "easy_ham", sep =.Platform$file.sep)))
head(list.files(path=(spamPath "easy_ham", sep =.Platform$file.sep)))
head(list.files(path=(spamPath, sep =.Platform$file.sep)))
head(list.files(path=(spamPath,"messages", "easy_ham" sep =.Platform$file.sep)))
head(list.files(path=(spamPath,"data", "easy_ham" sep =.Platform$file.sep)))
head(list.files(path = paste(spamPath,  "easy_ham", sep = .Platform$file.sep)))
head(list.files(path = paste(spamPath,  "easy_ham", sep = .Platform$file.sep)))
head(list.files(path = paste(spamPath,  "spam_2", sep = .Platform$file.sep)))
dirNames = list.files(path = paste(spamPath, "data", sep = .Platform$file.sep))
length(list.files(paste(spamPath, "data", dirNames, sep = .Platform$file.sep)))
spamPath = "messages"
list.dirs(spamPath, full.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
spamPath = "data"
list.dirs(spamPath, full.names = FALSE)
head(list.files(path = paste(spamPath, "messages", "easy_ham", sep = .Platform$file.sep)))
head(list.files(path = paste(spamPath, "messages", "spam_2", sep = .Platform$file.sep)))
dirNames = list.files(path = paste(spamPath, "messages", sep = .Platform$file.sep)) length(list.files(paste(spamPath, "messages", dirNames, sep = .Platform$file.sep)))
dirNames = list.files(path = paste(spamPath, "messages", sep = .Platform$file.sep))
length(list.files(paste(spamPath, "messages", dirNames, sep = .Platform$file.sep)))
dirNames = list.files(path = paste(spamPath, "messages", sep = .Platform$file.sep))
length(list.files(paste(spamPath, "messages", dirNames, sep = .Platform$file.sep)))
sapply(paste(spamPath, "messages", dirNames, sep = .Platform$file.sep), function(dir) length(list.files(dir)) )
fullDirNames = paste(spamPath, "messages", dirNames, sep = .Platform$file.sep)
fileNames=list.file(fullDirNames[1], full.names=TRUE)
fullDirNames = paste(spamPath, "messages", dirNames, sep = .Platform$file.sep)
fileNames=list.files(fullDirNames[1], full.names=TRUE)
msg = readLines(fileNames[1])
head(msg)
indx = c(1:5, 15, 27, 68, 69, 329, 404, 427, 516, 852, 971) fn = list.files(fullDirNames[1], full.names = TRUE)[indx] sampleEmail = sapply(fn, readLines)
indx = c(1:5, 15, 27, 68, 69, 329, 404, 427, 516, 852, 971)
fn = list.files(fullDirNames[1], full.names = TRUE)[indx]
sampleEmail = sapply(fn, readLines)
fullDirNames = paste(spamPath, "messages", dirNames, sep = .Platform$file.sep)
fileNames=list.files(fullDirNames[1], full.names=TRUE)
msg = readLines(fileNames[1])
head(msg, 10)
msg = sampleEmail[[1]]
which(msg == "")
splitPoint = match("", msg)
msg[ (splitPoint-2):(splitPoint+6)]
splitMessage = function(msg) {
splitPoint = match("", msg)
header = msg[1:(splitPoint-1)]
body = msg[-(1:splitPoint)]
retun(list(header = header, body = body))
}
sampleSplit = lapply(sampleEmail, splitMessage)
splitMessage = function(msg) {
splitPoint = match("", msg)
header = msg[1:(splitPoint-1)]
body = msg[-(1:splitPoint)]
return(list(header = header, body = body))
}
sampleSplit = lapply(sampleEmail, splitMessage)
sampleSplit
header = sampleSplit[[1]]$header
grep("Content-Type", header)
header = sampleSplit[[1]]$header
grep("Content-Type", header)
grep("multi", header)
grep("multi", tolower(header[46]))
headerList = lapply(samplSplit, function(msg) msg$header)
headerList = lapply(sampleSplit, function(msg) msg$header)
CTloc = sapply(headerList, grep, patter = "Content-Type")
CTloc
sapply(headerList, function(header){
CTloc = grep("Content-Type", header)
if (length(CTloc) == 0)
return (NA)
})
sapply(headerList, function(header){
CTloc = grep("Content-Type", header)
if (length(CTloc) == 0)
return (NA)
CTloc
})
hasAttach = sapply(hederList, function(header)
{
CTloc = grep("Content-Type", header)
if (length(CTloc)== 0) return(FALSE)
grepl("multi", tolower(header[CTloc]))
})
hasAttach = sapply(headerList, function(header)
{
CTloc = grep("Content-Type", header)
if (length(CTloc)== 0) return(FALSE)
grepl("multi", tolower(header[CTloc]))
})
hasAttach
